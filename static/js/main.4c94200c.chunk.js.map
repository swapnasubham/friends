{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","height","children","Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchField","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NASeA,EAPA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACzCH,EAAMI,WCSAC,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAM,SAASC,IAAG,+BAA4BH,EAA5B,cACvB,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACA,6BAEAA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACA,kBAAC,EAAD,CACIC,IAAOJ,EAAOG,GAAOR,GACrBA,GAAMK,EAAOG,GAAOR,GACpBF,KAAQO,EAAOG,GAAOV,KACtBC,MAASM,EAAOG,GAAOT,aCEpBW,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE5B,OACI,6BACI,2BACIX,UAAY,mCACZY,KAAO,SACPC,YAAc,iBACdC,SAAYH,MCYTI,E,kDAnBf,WAAYxB,GAAO,IAAD,8BACd,cAAOA,IACFyB,MAAQ,CACTC,UAAW,GAHD,E,gEAQdC,KAAKC,SAAS,CAACF,UAAW,M,+BAG1B,OAAGC,KAAKF,MAAMC,SACH,wDAEJC,KAAK3B,MAAMI,a,GAfEyB,aCgDbC,G,wDAxCb,aAAc,IAAD,8BACX,gBAYFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACT,YAAaa,EAAMC,OAAOC,SAZzC,EAAKT,MAAQ,CACXZ,OAAS,GACTM,YAAc,IAJL,E,gEAOO,IAAD,OACjBgB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACf,OAAQ0B,S,+BAM/B,IAAD,EACwBZ,KAAKF,MAA5BZ,EADD,EACCA,OAAQM,EADT,EACSA,YACTqB,EAAeb,KAAKF,MAAMZ,OAAO4B,QAAO,SAAAC,GAC5C,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASzB,EAAYwB,kBAEvD,OAAqB,IAAlB9B,EAAOgC,OACD,uCAIP,yBAAKpC,UAAY,MACf,wBAAIA,UAAY,MAAhB,WACA,kBAAC,EAAD,CAAWW,aAAgBO,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlB,OAAU2B,W,GAjCdX,c,MCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4c94200c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '800px'}}> \n        {props.children}\n        </div>)\n}\n\nexport default Scroll;","import React from 'react';\n\nconst Card = ({name,email,id}) =>{\n    return (\n        <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt = \"robots\" src = {`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js'\nconst CardList = ({robots}) => {\n\n    return (\n    <div>\n    {\n    robots.map((user,index) => {\n        return (\n        <Card \n            key = {robots[index].id} \n            id = {robots[index].id} \n            name = {robots[index].name} \n            email = {robots[index].email}\n            //skills = {robots[index].skills}\n            />);\n        })\n    }\n    </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField,searchChange}) => {\n\n    return(\n        <div>\n            <input \n                className = \"pa3 ba b--green bg-lightest-blue\" \n                type = \"search\" \n                placeholder = \"Search Friends\"\n                onChange = {searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super (props);\n        this.state = {\n            hasError : false\n        }\n    }\n    \n    componentDidCatch(){\n        this.setState({hasError : true})\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>OOPs There is Some Error</h1>\n        }\n        return this.props.children;\n    }\n}\n    \n\n    export default ErrorBoundary;","import React,{Component} from 'react';\n/* importing different component */\nimport Scroll from '../components/Scroll.js'\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport ErrorBoundary from '../components/ErrorBoundary.js'\nimport './App.css'\n\nclass App extends Component {\n  /* constructor */\n  constructor(){\n    super ()\n    this.state = {\n      robots : [],\n      searchField : \"\"\n    }\n  }\n  componentDidMount(){\n    fetch('https://swapnasubhamdas.github.io/api.json') // https://swapnasubhamdas.github.io/api.json // https://jsonplaceholder.typicode.com/users\n    .then(response => response.json())\n    .then(users => this.setState({robots: users}))\n\n  }\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value});\n  }\n  render(){\n    const {robots, searchField} = this.state;\n    const filterRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    if(robots.length === 0){\n      return <h1>Loading</h1>\n    }\n    else{\n    return (\n      <div className = \"tc\">\n        <h1 className = \"f1\">Friends</h1>\n        <SearchBox searchChange = {this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots = {filterRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n      );\n    }\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}